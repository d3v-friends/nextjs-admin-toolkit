"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { fnCss } from "nextjs-tools";
import { useEffect, useState } from "react";
import { Button } from "../..";
export default function ({ label, name, defaultValue, className, options, printer = (v) => `${v}`, buttonColor = "primary", gridClassName = "grid-cols-3 gap-2 lg:gap-4", }) {
    const [value, setValue] = useState(defaultValue || "");
    useEffect(() => {
        setValue(defaultValue || "");
    }, [defaultValue]);
    return (_jsxs("div", { className: fnCss.concat(className), children: [label && _jsx("div", { className: "label", children: label }), _jsx("input", { hidden: true, required: true, name: name, value: value, onChange: (e) => setValue(e.target.value) }), _jsx("div", { className: fnCss.sum("grid", gridClassName), children: options.map((v, i) => (_jsx(Button, { buttonColor: buttonColor, buttonStyle: has(value, v) ? "filled" : "outlined", onClick: () => {
                        const res = has(value, v) ? pop(value, v) : push(value, v);
                        setValue(res);
                    }, children: printer(v) }, i))) })] }));
}
function has(origin, value) {
    const split = origin.split(",");
    return split.findIndex((v) => v === value) !== -1;
}
function push(origin, value) {
    if (has(origin, value))
        return origin;
    if (origin === "")
        return value;
    let split = origin.split(",");
    split.push(value);
    split = split.sort();
    let res = "";
    for (const elem of split) {
        res = `${res},${elem}`;
    }
    return res.slice(1, res.length);
}
function pop(origin, value) {
    if (!has(origin, value))
        return origin;
    let split = origin.split(",");
    const idx = split.findIndex((v) => v === value);
    split = [...split.slice(0, idx), ...split.slice(idx + 1)];
    split = split.sort();
    let res = "";
    for (const elem of split) {
        res = `${res},${elem}`;
    }
    return res.slice(1, res.length);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZm9ybS9pbnB1dC1vcHRpb25zL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBQ2IsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUNuQyxPQUFjLEVBQVksU0FBUyxFQUFFLFFBQVEsRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUM1RCxPQUFPLEVBQUMsTUFBTSxFQUFhLE1BQU0sT0FBTyxDQUFDO0FBYXpDLE1BQU0sQ0FBQyxPQUFPLFdBQVcsRUFDeEIsS0FBSyxFQUNMLElBQUksRUFDSixZQUFZLEVBQ1osU0FBUyxFQUNULE9BQU8sRUFDUCxPQUFPLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQy9CLFdBQVcsR0FBRyxTQUFTLEVBQ3ZCLGFBQWEsR0FBRyw0QkFBNEIsR0FDM0I7SUFDakIsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXZELFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDZCxRQUFRLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFFbkIsT0FBTyxDQUNOLGVBQUssU0FBUyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQ3JDLEtBQUssSUFBSSxjQUFLLFNBQVMsRUFBQyxPQUFPLFlBQUUsS0FBSyxHQUFPLEVBQzlDLGdCQUNDLE1BQU0sUUFDTixRQUFRLFFBQ1IsSUFBSSxFQUFFLElBQUksRUFDVixLQUFLLEVBQUUsS0FBSyxFQUNaLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdB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